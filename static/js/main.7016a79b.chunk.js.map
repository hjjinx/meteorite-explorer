{"version":3,"sources":["Results.js","App.js","serviceWorker.js","index.js"],"names":["Results","results","this","props","map","r","i","react_default","a","createElement","key","name","style","textAlign","id","nametype","recclass","mass","includes","split","slice","fall","year","geolocation","latitude","longitude","length","overflowX","width","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChangeSearch","e","preventDefault","setState","searchQuery","target","value","onChangePerPage","perPage","page","onChangePage","search","fetch","concat","state","then","json","console","log","className","onSubmit","type","placeholder","onChange","class","min","Results_Results","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7016a79b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class Results extends Component {\r\n  render() {\r\n    let results = this.props.results;\r\n    results = results.map((r, i) => {\r\n      return (\r\n        <tr key={i}>\r\n          <td>{r.name}</td>\r\n          <td style={{ textAlign: \"right\" }}>{r.id}</td>\r\n          <td>{r.nametype}</td>\r\n          <td>{r.recclass}</td>\r\n          <td style={{ textAlign: \"right\" }}>\r\n            {r.mass\r\n              ? r.mass.includes(\".\")\r\n                ? r.mass.split(\".\")[0] + r.mass.split(\".\")[1].slice(0, 2)\r\n                : r.mass\r\n              : \"\"}\r\n          </td>\r\n          <td>{r.fall}</td>\r\n          <td style={{ textAlign: \"right\" }}>\r\n            {r.year ? r.year.slice(0, 4) : \"\"}\r\n          </td>\r\n          <td>{r.geolocation ? r.geolocation.latitude : \"\"}</td>\r\n          <td>{r.geolocation ? r.geolocation.longitude : \"\"}</td>\r\n        </tr>\r\n      );\r\n    });\r\n    if (results.length <= 0)\r\n      return <div style={{ textAlign: \"center\" }}>No Results Found!</div>;\r\n    else\r\n      return (\r\n        <div style={{ overflowX: \"auto\" }}>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th style={{ width: \"18%\" }}>Name</th>\r\n                <th style={{ textAlign: \"right\", width: \"3%\" }}>Id</th>\r\n                <th style={{ width: \"12%\" }}>Name Type</th>\r\n                <th style={{ width: \"17%\" }}>Rec Class</th>\r\n                <th style={{ textAlign: \"right\", width: \"10%\" }}>Mass (g)</th>\r\n                <th style={{ width: \"2%\" }}>Fall</th>\r\n                <th style={{ width: \"5%\" }}>Year</th>\r\n                <th style={{ width: \"7%\" }}>Latitude</th>\r\n                <th style={{ width: \"7%\" }}>Longitude</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>{results}</tbody>\r\n          </table>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Results from \"./Results\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      searchQuery: \"\",\n      perPage: 100,\n      page: 0, // Total of 45,716 results\n      results: []\n    };\n  }\n\n  async componentDidMount() {\n    let results = await fetch(\n      `https://data.nasa.gov/resource/gh4g-9sfh.json?$limit=100&$offset=0`\n    );\n    console.log(results);\n    results = await results.json();\n    this.setState({ results });\n  }\n\n  onChangeSearch = e => {\n    e.preventDefault();\n    this.setState({\n      searchQuery: e.target.value\n    });\n  };\n\n  onChangePerPage = e => {\n    e.preventDefault();\n    this.setState({ perPage: e.target.value, page: 0 });\n  };\n  onChangePage = e => {\n    e.preventDefault();\n    this.setState({ page: e.target.value - 1 });\n  };\n  search = e => {\n    e.preventDefault();\n    fetch(\n      `https://data.nasa.gov/resource/gh4g-9sfh.json?$limit=${\n        this.state.perPage\n      }&$offset=${this.state.page *\n        this.state.perPage}&$where=lower(name)%20like%20lower(%22%25${\n        this.state.searchQuery\n      }%25%22)`\n    )\n      .then(r => r.json())\n      .then(results => this.setState({ results }));\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"header\">Meteorite Explorer</div>\n        <form className=\"searchBar\" onSubmit={this.search}>\n          <div className=\"searchDiv\">\n            Name{\" \"}\n            <input\n              value={this.state.searchQuery}\n              type=\"text\"\n              name=\"search\"\n              className=\"searchInput\"\n              placeholder=\"Search by Name\"\n              onChange={this.onChangeSearch}\n            />{\" \"}\n            Page{\" \"}\n            <input\n              type=\"number\"\n              name=\"perPage\"\n              class=\"pageInput\"\n              value={this.state.page + 1}\n              onChange={this.onChangePage}\n              min={1}\n            />{\" \"}\n          </div>\n\n          <button className=\"searchButton\"> Search</button>\n        </form>\n\n        <div className=\"perPageContainer\">\n          Results Per Page:{\" \"}\n          <input\n            type=\"number\"\n            name=\"perPage\"\n            class=\"perPageInput\"\n            value={this.state.perPage}\n            onChange={this.onChangePerPage}\n          />\n        </div>\n        <Results results={this.state.results} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}